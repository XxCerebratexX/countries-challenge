{"version":3,"sources":["server.js"],"names":["fetch","require","bodyParser","mockAPIResponse","dotenv","port","express","app","origin","savedTrip","listen","console","log","use","urlencoded","extended","json","cors","config","get","getCountries","getCountriesDataByName","req","res","send","headersForGetCall","method","headers","then","data","err","handleError","response","query","name","api","type","message","replace","from","handleErrorResponse","arg","element","error","module","exports"],"mappings":"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","sourcesContent":["const fetch = require('node-fetch');\nconst bodyParser = require('body-parser');\nconst mockAPIResponse = require('./mockAPI.js')\nconst dotenv = require('dotenv');\nconst port = 8003;\n// Setup empty JS object to act as endpoint for all routes\n// Require Express to run server and routes\nconst express = require('express');\nconst app = express({ origin: true });\nconst savedTrip = [];\n// Start up an instance of app\napp.listen(port, () => {\n    console.log(`Server is running on ${port}`);\n});\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\nconst cors = require('cors');\ndotenv.config();\napp.use(express.static('dist'));\napp.use(cors({ origin: true }));\n\n// Setup Server\napp.get(\"/getCountries\", getCountries);\napp.get(\"/getCountriesByName\", getCountriesDataByName);\n\napp.get('/test', function(req, res) {\n    res.send(mockAPIResponse)\n})\n\nconst headersForGetCall = {\n    method: \"GET\",\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\n\nasync function getCountries(req, res) {\n    const response = await fetch('https://restcountries.eu/rest/v2/all?fields=name', headersForGetCall).then(res => res.json()).then(data => {\n        console.log(\"Call was successful\");\n        return data;\n    }).catch(err => {\n        console.log(err);\n        return handleError(err, \"REST Countries\");\n    });\n    /*  //this block of code can function as well in case the REST didn't had the query filter option\n    if(response !== null && response.length){\n        let countriesRes = response.map(el => {\n            return {name: el.name};\n        });\n\n    res.send({countriesRes})\n    } else {\n        res.send({\n            type: 'Error',\n            message: \"Call was succesful but data for countries is empty\"\n        });\n    } */\n    res.send({ response })\n}\n\nasync function getCountriesDataByName(req, res) {\n    console.log(req.query);\n    if (req.query.name) {\n        const response = await fetch(`https://restcountries.eu/rest/v2/name/${req.query.name}?fields=name;region;currencies;languages;population`, headersForGetCall)\n            .then(res => res.json()).then(data => data).catch(err => handleError(err, 'REST Countries'));\n\n        /* //this block of code can function as well in case the REST didn't had the query filter option as above\n        if (response !== null && response.length) {\n            let countriesRes = response.map(el => {\n                return { \n                    name: el.name,\n                    region: el.region,\n                    currencies: el.currencies,\n                    languages: el.languages,\n                    population: el.population\n                 };\n            });\n\n            res.send({ countriesRes })\n        } else {\n            res.send({\n                type: 'Error',\n                message: \"Call was succesful but data for countries is empty\"\n            });\n        } */\n\n        res.send({ response })\n    }\n}\n\nfunction handleError(err, api) {\n    return {\n        type: 'Error',\n        message: err.message.replace(/((http|https|ftp|ftps)\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(\\/\\S*)?)/g, api) || 'Something went wrong, try again later',\n        from: api\n    };\n}\n\nfunction handleErrorResponse(...arg) {\n    for (let element of arg) {\n        if (element.type === \"Error\" || element.error) {\n            return element;\n        }\n    }\n}\nmodule.exports = app;"],"file":"server.dev.js"}