{"version":3,"sources":["server.js"],"names":["fetch","require","bodyParser","dotenv","express","origin","savedTrip","app","listen","port","console","log","concat","use","urlencoded","extended","json","config","cors","get","getCountries","getCountriesDataByName","req","res","headersForGetCall","then","data","send","mockAPIResponse","err","handleError","response","regeneratorRuntime","async","_context2","prev","next","query","name","awrap","sent","stop","api","type","message","replace","from","_len","arguments","length","arg","Array","_key","_i","_arg","element","error","module","exports"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,cAChBC,WAAaD,QAAQ,eADrBD,gBAAgBC,QAAD,gBAGfE,OAASF,QAAQ,UAFjBC,KAAAA,KAMAE,QAAUH,QAAQ,WAJlBE,IAAMC,QAAU,CAACC,QAAvB,IAMMC,UAAY,GAHlBC,IAAAC,OAAAC,KAAA,WAMIC,QAAQC,IAAR,wBAAAC,OAAoCH,SAExCF,IAAIM,IAAIX,WAAWY,WAAW,CAAEC,UAAU,KAN1CR,IAAMA,IAAGL,WAAWc,QAAEX,IAAAA,KAAQJ,QAAA,QAAVE,OAApBc,SACAV,IAAMD,IAAAA,QAAS,OACf,SASAC,IAAIM,IAAIK,KAAK,CAAEb,QAAQ,KANtBE,IAFDY,IAAA,gBAAAC,cAGAb,IAAIM,IAAIX,sBAAsBmB,wBAAAd,IAA9BY,IAAA,QAAA,SAAAG,EAAAC,GACIV,EAAIX,KAAAA,mBAcR,IAAMsB,kBAAoB,CAZ1BrB,OAAOc,MACHJ,QAAIT,CACAc,eAAK,qBAGbX,SAAQa,aAAiBA,EAAAA,GAAzBb,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MACQP,MAAuBqB,mDAA/BG,mBAAAC,KAAA,SAAAF,GAAA,OAAAA,EAAAP,SAAAS,KAAA,SAAAC,GAGQC,OADAjB,QAARC,IAAiB,uBACJiB,IAHL,MAER,SAAAC,GAKU,OADJL,QAAAA,IAAAA,GAAoBM,YAAAD,EAAA,qBAP1BtB,KAAAA,EACQwB,EADRxB,EAAAA,KAegHgB,EAAAI,KAAgBF,CAAAA,SAAAA,IAfhIlB,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UAkBK,SAHsBc,uBAGPC,EAAAC,GAAf,IAAAQ,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GACG1B,QAAAA,IAAAA,EAAQC,OACRW,EAAAe,MAAAC,KAFH,OAAAJ,EAAAE,KAAA,EAAAJ,mBAAAO,MAJLvC,MAAA,yCAAAY,OAAAU,EAAAe,MAAAC,KAAA,uDAAAd,mBA4BaC,KAAK,SAAAF,GAAG,OAAIA,EAAIP,SAAQS,KAAK,SAAAC,GAAI,OAAIA,IA5BlD,MA4B8D,SAAAG,GAAG,OAAIC,YAAYD,EAAK,qBAxBjFK,EAAAE,KAAA,EAAA,MAAA,KAAA,EAJLL,EAIKG,EAAAM,KAJLjB,EAAAI,KAAA,CAAAI,SAAAA,IAIK,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAO,UAJL,SAAAX,YAAAD,EAAAa,GAuDI,MAAO,CA/BXC,KAAetB,QAAfuB,QAAAf,EAAAe,QAAAC,QAAA,wEAAAH,IAAA,wCAAAI,KAAAJ,GACIhC,SAAAA,sBAAA,IAAA,IAAAqC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAsCA,IAAA,IAAAC,EAAA,EAAAC,EAAoBJ,EAApBG,EAAAC,EAAAL,OAAAI,IAAyB,CAApB,IAAIE,EAAOD,EAAAD,GAvCpB,GAAA,UAAAE,EAEYlB,MAFZkB,EAAAC,MAAA,OAAAD,GAAAE,OAAAC,QAAAnD","file":"server.min.js","sourcesContent":["const fetch = require('node-fetch');\nconst bodyParser = require('body-parser');\nconst mockAPIResponse = require('./mockAPI.js')\nconst dotenv = require('dotenv');\nconst port = 8003;\n// Setup empty JS object to act as endpoint for all routes\n// Require Express to run server and routes\nconst express = require('express');\nconst app = express({ origin: true });\nconst savedTrip = [];\n// Start up an instance of app\napp.listen(port, () => {\n    console.log(`Server is running on ${port}`);\n});\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\nconst cors = require('cors');\ndotenv.config();\napp.use(express.static('dist'));\napp.use(cors({ origin: true }));\n\n// Setup Server\napp.get(\"/getCountries\", getCountries);\napp.get(\"/getCountriesByName\", getCountriesDataByName);\n\napp.get('/test', function(req, res) {\n    res.send(mockAPIResponse)\n})\n\nconst headersForGetCall = {\n    method: \"GET\",\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\n\nasync function getCountries(req, res) {\n    const response = await fetch('https://restcountries.eu/rest/v2/all?fields=name', headersForGetCall).then(res => res.json()).then(data => {\n        console.log(\"Call was successful\");\n        return data;\n    }).catch(err => {\n        console.log(err);\n        return handleError(err, \"REST Countries\");\n    });\n    /*  //this block of code can function as well in case the REST didn't had the query filter option\n    if(response !== null && response.length){\n        let countriesRes = response.map(el => {\n            return {name: el.name};\n        });\n\n    res.send({countriesRes})\n    } else {\n        res.send({\n            type: 'Error',\n            message: \"Call was succesful but data for countries is empty\"\n        });\n    } */\n    res.send({ response })\n}\n\nasync function getCountriesDataByName(req, res) {\n    console.log(req.query);\n    if (req.query.name) {\n        const response = await fetch(`https://restcountries.eu/rest/v2/name/${req.query.name}?fields=name;region;currencies;languages;population`, headersForGetCall)\n            .then(res => res.json()).then(data => data).catch(err => handleError(err, 'REST Countries'));\n\n        /* //this block of code can function as well in case the REST didn't had the query filter option as above\n        if (response !== null && response.length) {\n            let countriesRes = response.map(el => {\n                return { \n                    name: el.name,\n                    region: el.region,\n                    currencies: el.currencies,\n                    languages: el.languages,\n                    population: el.population\n                 };\n            });\n\n            res.send({ countriesRes })\n        } else {\n            res.send({\n                type: 'Error',\n                message: \"Call was succesful but data for countries is empty\"\n            });\n        } */\n\n        res.send({ response })\n    }\n}\n\nfunction handleError(err, api) {\n    return {\n        type: 'Error',\n        message: err.message.replace(/((http|https|ftp|ftps)\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(\\/\\S*)?)/g, api) || 'Something went wrong, try again later',\n        from: api\n    };\n}\n\nfunction handleErrorResponse(...arg) {\n    for (let element of arg) {\n        if (element.type === \"Error\" || element.error) {\n            return element;\n        }\n    }\n}\nmodule.exports = app;"]}